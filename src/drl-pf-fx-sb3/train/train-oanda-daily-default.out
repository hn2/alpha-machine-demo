e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
random
['td3']
daily
True
Training with config file ../settings/config-train-oanda-daily-td3.ini and default params True
Using default params
v_instruments_in_portfolio = ['nzdchf', 'cadchf', 'gbpcad', 'audcad', 'nzdcad', 'eurjpy', 'usdjpy']
v_instruments_in_portfolio_sorted = ['audcad', 'cadchf', 'eurjpy', 'gbpcad', 'nzdcad', 'nzdchf', 'usdjpy']
Account currency: aud
row_count=5684, start_row=3, start_date=2004-06-03T00:00:00.000000000, end_row=5683, end_date=2022-10-07T00:00:00.000000000
Data shape:(7, 5680, 4)
Instruments:['audcad', 'cadchf', 'eurjpy', 'gbpcad', 'nzdcad', 'nzdchf', 'usdjpy'], lookack:100, random_episode_start:True, cash:1000.0, max_slippage_percent:0.01, lot_size:Micro, leverage:20, compute_position:long_and_short, compute_indicators:all_full, compute_reward:['log_returns'], meta_rl:True, verbose:False
Model name:fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.True-e6a0b128
v_online_model_file_name: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.True-e6a0b128\online\model.zip
v_online_model_file_name_stats: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.True-e6a0b128\online\stats.pkl
Online class: <class 'stable_baselines3.td3.td3.TD3'>, Online policy: <class 'stable_baselines3.td3.policies.TD3Policy'>
Using cuda device
Start training model with account_currency aud, instrument ['audcad', 'cadchf', 'eurjpy', 'gbpcad', 'nzdcad', 'nzdchf', 'usdjpy'], pip_size [0.0001, 0.0001, 0.01, 0.0001, 0.0001, 0.0001, 0.01], pip_spread [2, 2, 2, 2, 2, 2, 2]...
Num timesteps: 100
Best mean reward: -inf, Best mean reward step: 0 Last mean reward per episode: -0.0093
Last reward =  [0.00496748]
Reward buffer length =  100
Num timesteps: 200
Best mean reward: -0.0093, Best mean reward step: 100 Last mean reward per episode: -0.0102
Last reward =  [-0.00195644]
Reward buffer length =  200
Num timesteps: 300
Best mean reward: -0.0093, Best mean reward step: 100 Last mean reward per episode: -0.0040
Last reward =  [-0.02089852]
Reward buffer length =  300
Num timesteps: 400
Best mean reward: -0.0040, Best mean reward step: 300 Last mean reward per episode: -0.0039
Last reward =  [0.00033554]
Reward buffer length =  400
Num timesteps: 500
Best mean reward: -0.0039, Best mean reward step: 400 Last mean reward per episode: -0.0035
Last reward =  [-0.07281557]
Reward buffer length =  500
Num timesteps: 600
Best mean reward: -0.0035, Best mean reward step: 500 Last mean reward per episode: -0.0016
Last reward =  [-0.03048763]
Reward buffer length =  600
Num timesteps: 700
Best mean reward: -0.0016, Best mean reward step: 600 Last mean reward per episode: -0.0030
Last reward =  [0.00487069]
Reward buffer length =  700
Num timesteps: 800
Best mean reward: -0.0016, Best mean reward step: 600 Last mean reward per episode: -0.0010
Last reward =  [-0.00331683]
Reward buffer length =  800
Num timesteps: 900
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0049
Last reward =  [0.00038804]
Reward buffer length =  900
Num timesteps: 1000
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0019
Last reward =  [0.00686963]
Reward buffer length =  1000
Num timesteps: 1100
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0024
Last reward =  [0.01500774]
Reward buffer length =  1100
Num timesteps: 1200
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0052
Last reward =  [-0.01995138]
Reward buffer length =  1200
Num timesteps: 1300
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0044
Last reward =  [0.02149963]
Reward buffer length =  1300
Num timesteps: 1400
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0015
Last reward =  [-0.00365926]
Reward buffer length =  1400
Num timesteps: 1500
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: -0.0028
Last reward =  [-0.07139861]
Reward buffer length =  1500
Num timesteps: 1600
Best mean reward: -0.0010, Best mean reward step: 800 Last mean reward per episode: 0.0062
Last reward =  [-0.00356811]
Reward buffer length =  1600
Num timesteps: 1700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0026
Last reward =  [6.087595e-05]
Reward buffer length =  1700
Num timesteps: 1800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0053
Last reward =  [-0.01953935]
Reward buffer length =  1800
Num timesteps: 1900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0050
Last reward =  [0.01186473]
Reward buffer length =  1900
Num timesteps: 2000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0072
Last reward =  [-0.0056135]
Reward buffer length =  2000
Num timesteps: 2100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0020
Last reward =  [-0.01858183]
Reward buffer length =  2100
Num timesteps: 2200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0020
Last reward =  [0.00676529]
Reward buffer length =  2200
Num timesteps: 2300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0036
Last reward =  [-0.0038251]
Reward buffer length =  2300
Num timesteps: 2400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0058
Last reward =  [0.00207171]
Reward buffer length =  2400
Num timesteps: 2500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0042
Last reward =  [-0.01740005]
Reward buffer length =  2500
Num timesteps: 2600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0009
Last reward =  [0.0369475]
Reward buffer length =  2600
Num timesteps: 2700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0035
Last reward =  [0.09229094]
Reward buffer length =  2700
Num timesteps: 2800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0024
Last reward =  [-0.00386868]
Reward buffer length =  2800
Num timesteps: 2900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0030
Last reward =  [-0.00998671]
Reward buffer length =  2900
Num timesteps: 3000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0001
Last reward =  [-0.00916334]
Reward buffer length =  3000
Num timesteps: 3100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0031
Last reward =  [-0.00994298]
Reward buffer length =  3100
Num timesteps: 3200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0015
Last reward =  [-0.0342623]
Reward buffer length =  3200
Num timesteps: 3300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0044
Last reward =  [-0.00210062]
Reward buffer length =  3300
Num timesteps: 3400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0024
Last reward =  [-0.00252214]
Reward buffer length =  3400
Num timesteps: 3500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0015
Last reward =  [0.00418439]
Reward buffer length =  3500
Num timesteps: 3600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0044
Last reward =  [0.00704902]
Reward buffer length =  3600
Num timesteps: 3700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0059
Last reward =  [-0.01009785]
Reward buffer length =  3700
Num timesteps: 3800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0005
Last reward =  [-0.01715973]
Reward buffer length =  3800
Num timesteps: 3900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0029
Last reward =  [-0.00286009]
Reward buffer length =  3900
Num timesteps: 4000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0002
Last reward =  [-0.03516626]
Reward buffer length =  4000
Num timesteps: 4100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0108
Last reward =  [-0.07776356]
Reward buffer length =  4100
Num timesteps: 4200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0024
Last reward =  [-0.06148338]
Reward buffer length =  4200
Num timesteps: 4300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0030
Last reward =  [0.01822853]
Reward buffer length =  4300
Num timesteps: 4400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0032
Last reward =  [0.00241518]
Reward buffer length =  4400
Num timesteps: 4500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0022
Last reward =  [0.08356476]
Reward buffer length =  4500
Num timesteps: 4600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0019
Last reward =  [-0.00379577]
Reward buffer length =  4600
Num timesteps: 4700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0047
Last reward =  [0.00688839]
Reward buffer length =  4700
Num timesteps: 4800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0055
Last reward =  [-0.03315817]
Reward buffer length =  4800
Num timesteps: 4900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0065
Last reward =  [-0.12547588]
Reward buffer length =  4900
Num timesteps: 5000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0024
Last reward =  [0.00781856]
Reward buffer length =  5000
Num timesteps: 5100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0076
Last reward =  [-0.09023237]
Reward buffer length =  5100
Num timesteps: 5200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0001
Last reward =  [0.01045752]
Reward buffer length =  5200
Num timesteps: 5300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0026
Last reward =  [0.01364422]
Reward buffer length =  5300
Num timesteps: 5400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0016
Last reward =  [-0.00246525]
Reward buffer length =  5400
Num timesteps: 5500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0038
Last reward =  [-0.01207462]
Reward buffer length =  5500
Num timesteps: 5600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0009
Last reward =  [0.00689363]
Reward buffer length =  5600
Num timesteps: 5700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0020
Last reward =  [-0.00765324]
Reward buffer length =  5700
Num timesteps: 5800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0044
Last reward =  [-0.01838971]
Reward buffer length =  5800
Num timesteps: 5900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0035
Last reward =  [0.04553914]
Reward buffer length =  5900
Num timesteps: 6000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0034
Last reward =  [-0.00098634]
Reward buffer length =  6000
Num timesteps: 6100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0017
Last reward =  [-0.0256331]
Reward buffer length =  6100
Num timesteps: 6200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0053
Last reward =  [0.02908182]
Reward buffer length =  6200
Num timesteps: 6300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0038
Last reward =  [0.01886153]
Reward buffer length =  6300
Num timesteps: 6400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0056
Last reward =  [-0.0911572]
Reward buffer length =  6400
Num timesteps: 6500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0033
Last reward =  [-0.01399024]
Reward buffer length =  6500
Num timesteps: 6600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0011
Last reward =  [-0.00891972]
Reward buffer length =  6600
Num timesteps: 6700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0080
Last reward =  [0.01709843]
Reward buffer length =  6700
Num timesteps: 6800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0031
Last reward =  [-0.06018591]
Reward buffer length =  6800
Num timesteps: 6900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0002
Last reward =  [0.00645065]
Reward buffer length =  6900
Num timesteps: 7000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0039
Last reward =  [0.04010487]
Reward buffer length =  7000
Num timesteps: 7100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0014
Last reward =  [0.0015974]
Reward buffer length =  7100
Num timesteps: 7200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0083
Last reward =  [0.00589442]
Reward buffer length =  7200
Num timesteps: 7300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0011
Last reward =  [-0.00337327]
Reward buffer length =  7300
Num timesteps: 7400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0025
Last reward =  [-0.00583589]
Reward buffer length =  7400
Num timesteps: 7500
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0005
Last reward =  [0.00100493]
Reward buffer length =  7500
Num timesteps: 7600
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0012
Last reward =  [-0.01431514]
Reward buffer length =  7600
Num timesteps: 7700
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0032
Last reward =  [-0.00527406]
Reward buffer length =  7700
Num timesteps: 7800
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0027
Last reward =  [0.00590885]
Reward buffer length =  7800
Num timesteps: 7900
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0034
Last reward =  [0.02812405]
Reward buffer length =  7900
Num timesteps: 8000
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0023
Last reward =  [0.00239813]
Reward buffer length =  8000
Num timesteps: 8100
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0030
Last reward =  [-0.0023936]
Reward buffer length =  8100
Num timesteps: 8200
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: 0.0009
Last reward =  [0.00151479]
Reward buffer length =  8200
Num timesteps: 8300
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0012
Last reward =  [0.01146835]
Reward buffer length =  8300
Num timesteps: 8400
Best mean reward: 0.0062, Best mean reward step: 1600 Last mean reward per episode: -0.0030forrtl: error (200): program aborting due to control-C event
Image              PC                Routine            Line        Source             
libifcoremd.dll    00007FFBEB283B58  Unknown               Unknown  Unknown
KERNELBASE.dll     00007FFC7C845485  Unknown               Unknown  Unknown
KERNEL32.DLL       00007FFC7E7554E0  Unknown               Unknown  Unknown
ntdll.dll          00007FFC7EC0485B  Unknown               Unknown  Unknown
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
random
['ppo']
daily
True
Training with config file ../settings/config-train-oanda-daily-ppo.ini and default params True
Using default params
v_instruments_in_portfolio = ['gbpcad', 'gbpusd', 'audcad', 'eurusd', 'eurgbp', 'euraud', 'audjpy']
v_instruments_in_portfolio_sorted = ['audcad', 'audjpy', 'euraud', 'eurgbp', 'eurusd', 'gbpcad', 'gbpusd']
Account currency: eur
row_count=5686, start_row=5, start_date=2004-06-07T00:00:00.000000000, end_row=5685, end_date=2022-10-07T00:00:00.000000000
Data shape:(7, 5680, 4)
Instruments:['audcad', 'audjpy', 'euraud', 'eurgbp', 'eurusd', 'gbpcad', 'gbpusd'], lookack:100, random_episode_start:True, cash:1000.0, max_slippage_percent:0.01, lot_size:Micro, leverage:20, compute_position:long_and_short, compute_indicators:all_full, compute_reward:['log_returns'], meta_rl:False, verbose:False
Model name:fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-742f6416
v_online_model_file_name: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-742f6416\online\model.zip
v_online_model_file_name_stats: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-742f6416\online\stats.pkl
Online class: <class 'stable_baselines3.ppo.ppo.PPO'>, Online policy: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
Using cuda device
Start training model with account_currency eur, instrument ['audcad', 'audjpy', 'euraud', 'eurgbp', 'eurusd', 'gbpcad', 'gbpusd'], pip_size [0.0001, 0.01, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001], pip_spread [2, 2, 2, 2, 2, 2, 2]...
Num timesteps: 100
Best mean reward: -inf, Best mean reward step: 0 Last mean reward per episode: -0.0074
Last reward =  [0.04615164]
Reward buffer length =  100
Num timesteps: 200
Best mean reward: -0.0074, Best mean reward step: 100 Last mean reward per episode: -0.0040
Last reward =  [0.01708746]
Reward buffer length =  200
Num timesteps: 300
Best mean reward: -0.0040, Best mean reward step: 200 Last mean reward per episode: -0.0030
Last reward =  [-0.01312399]
Reward buffer length =  300
Num timesteps: 400
Best mean reward: -0.0030, Best mean reward step: 300 Last mean reward per episode: 0.0022
Last reward =  [0.05890608]
Reward buffer length =  400
Num timesteps: 500
Best mean reward: 0.0022, Best mean reward step: 400 Last mean reward per episode: -0.0059
Last reward =  [-0.03454256]
Reward buffer length =  500
Num timesteps: 600
Best mean reward: 0.0022, Best mean reward step: 400 Last mean reward per episode: 0.0051
Last reward =  [-0.00282288]
Reward buffer length =  600
Num timesteps: 700
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0001
Last reward =  [0.01161289]
Reward buffer length =  700
Num timesteps: 800
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0059
Last reward =  [0.07128716]
Reward buffer length =  800
Num timesteps: 900
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0025
Last reward =  [0.00580168]
Reward buffer length =  900
Num timesteps: 1000
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0035
Last reward =  [-0.00423956]
Reward buffer length =  1000
Num timesteps: 1100
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0001
Last reward =  [0.01157665]
Reward buffer length =  1100
Num timesteps: 1200
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: 0.0002
Last reward =  [-0.01151228]
Reward buffer length =  1200
Num timesteps: 1300
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0057
Last reward =  [-0.00668335]
Reward buffer length =  1300
Num timesteps: 1400
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0060
Last reward =  [-0.03285074]
Reward buffer length =  1400
Num timesteps: 1500
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: 0.0041
Last reward =  [-0.01547885]
Reward buffer length =  1500
Num timesteps: 1600
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: 0.0017
Last reward =  [0.00047946]
Reward buffer length =  1600
Num timesteps: 1700
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0038
Last reward =  [-0.01536965]
Reward buffer length =  1700
Num timesteps: 1800
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: -0.0026
Last reward =  [0.03428316]
Reward buffer length =  1800
Num timesteps: 1900
Best mean reward: 0.0051, Best mean reward step: 600 Last mean reward per episode: 0.0065
Last reward =  [0.0018208]
Reward buffer length =  1900
Num timesteps: 2000
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0059
Last reward =  [0.03492308]
Reward buffer length =  2000
Num timesteps: 2100
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: 0.0012
Last reward =  [-0.0118103]
Reward buffer length =  2100
Num timesteps: 2200
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0055
Last reward =  [-0.03897762]
Reward buffer length =  2200
Num timesteps: 2300
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0018
Last reward =  [0.02415228]
Reward buffer length =  2300
Num timesteps: 2400
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0033
Last reward =  [-0.05313897]
Reward buffer length =  2400
Num timesteps: 2500
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0024
Last reward =  [-0.00256634]
Reward buffer length =  2500
Num timesteps: 2600
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0020
Last reward =  [-0.00452209]
Reward buffer length =  2600
Num timesteps: 2700
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0100
Last reward =  [-0.02188748]
Reward buffer length =  2700
Num timesteps: 2800
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0019
Last reward =  [0.03126556]
Reward buffer length =  2800
Num timesteps: 2900
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0088
Last reward =  [-0.04454657]
Reward buffer length =  2900
Num timesteps: 3000
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: -0.0025
Last reward =  [0.02939788]
Reward buffer length =  3000
Num timesteps: 3100
Best mean reward: 0.0065, Best mean reward step: 1900 Last mean reward per episode: 0.0091
Last reward =  [-0.02373567]
Reward buffer length =  3100
Num timesteps: 3200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0023
Last reward =  [0.00203112]
Reward buffer length =  3200
Num timesteps: 3300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0010
Last reward =  [0.00263985]
Reward buffer length =  3300
Num timesteps: 3400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0023
Last reward =  [-0.00415957]
Reward buffer length =  3400
Num timesteps: 3500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0032
Last reward =  [-0.0358237]
Reward buffer length =  3500
Num timesteps: 3600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0018
Last reward =  [0.0522027]
Reward buffer length =  3600
Num timesteps: 3700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0101
Last reward =  [0.01650453]
Reward buffer length =  3700
Num timesteps: 3800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0031
Last reward =  [0.0077734]
Reward buffer length =  3800
Num timesteps: 3900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0015
Last reward =  [0.02080297]
Reward buffer length =  3900
Num timesteps: 4000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0003
Last reward =  [0.07378864]
Reward buffer length =  4000
Num timesteps: 4100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0047
Last reward =  [0.02124929]
Reward buffer length =  4100
Num timesteps: 4200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0011
Last reward =  [-0.00718307]
Reward buffer length =  4200
Num timesteps: 4300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0062
Last reward =  [0.00572968]
Reward buffer length =  4300
Num timesteps: 4400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0003
Last reward =  [0.04283953]
Reward buffer length =  4400
Num timesteps: 4500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0005
Last reward =  [0.00655174]
Reward buffer length =  4500
Num timesteps: 4600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0001
Last reward =  [0.01452112]
Reward buffer length =  4600
Num timesteps: 4700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0052
Last reward =  [-0.02917004]
Reward buffer length =  4700
Num timesteps: 4800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0002
Last reward =  [-0.02070093]
Reward buffer length =  4800
Num timesteps: 4900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0005
Last reward =  [-0.02887821]
Reward buffer length =  4900
Num timesteps: 5000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0008
Last reward =  [0.01834488]
Reward buffer length =  5000
Num timesteps: 5100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0008
Last reward =  [0.01033831]
Reward buffer length =  5100
Num timesteps: 5200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0010
Last reward =  [0.00390291]
Reward buffer length =  5200
Num timesteps: 5300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0012
Last reward =  [0.01636076]
Reward buffer length =  5300
Num timesteps: 5400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0003
Last reward =  [-0.02138233]
Reward buffer length =  5400
Num timesteps: 5500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0053
Last reward =  [-0.02277565]
Reward buffer length =  5500
Num timesteps: 5600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0024
Last reward =  [-0.03631878]
Reward buffer length =  5600
Num timesteps: 5700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0057
Last reward =  [-0.00657511]
Reward buffer length =  5700
Num timesteps: 5800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0020
Last reward =  [0.01644182]
Reward buffer length =  5800
Num timesteps: 5900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0048
Last reward =  [-0.01349497]
Reward buffer length =  5900
Num timesteps: 6000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0057
Last reward =  [0.05856228]
Reward buffer length =  6000
Num timesteps: 6100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0015
Last reward =  [-0.0083847]
Reward buffer length =  6100
Num timesteps: 6200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0084
Last reward =  [-0.07743073]
Reward buffer length =  6200
Num timesteps: 6300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0058
Last reward =  [-0.01728535]
Reward buffer length =  6300
Num timesteps: 6400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0117
Last reward =  [0.00644779]
Reward buffer length =  6400
Num timesteps: 6500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0052
Last reward =  [-0.06395125]
Reward buffer length =  6500
Num timesteps: 6600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0097
Last reward =  [-0.01488519]
Reward buffer length =  6600
Num timesteps: 6700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0088
Last reward =  [0.01662207]
Reward buffer length =  6700
Num timesteps: 6800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0049
Last reward =  [-0.00579727]
Reward buffer length =  6800
Num timesteps: 6900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0022
Last reward =  [0.04839528]
Reward buffer length =  6900
Num timesteps: 7000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0062
Last reward =  [0.03122598]
Reward buffer length =  7000
Num timesteps: 7100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0008
Last reward =  [-0.01936841]
Reward buffer length =  7100
Num timesteps: 7200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0001
Last reward =  [0.09046531]
Reward buffer length =  7200
Num timesteps: 7300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0013
Last reward =  [-0.00031191]
Reward buffer length =  7300
Num timesteps: 7400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0052
Last reward =  [-0.05409396]
Reward buffer length =  7400
Num timesteps: 7500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0047
Last reward =  [-0.00908715]
Reward buffer length =  7500
Num timesteps: 7600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0007
Last reward =  [0.04151523]
Reward buffer length =  7600
Num timesteps: 7700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0010
Last reward =  [0.01304036]
Reward buffer length =  7700
Num timesteps: 7800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0013
Last reward =  [0.01768214]
Reward buffer length =  7800
Num timesteps: 7900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0041
Last reward =  [-0.00998524]
Reward buffer length =  7900
Num timesteps: 8000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0008
Last reward =  [0.02217724]
Reward buffer length =  8000
Num timesteps: 8100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0036
Last reward =  [0.00938904]
Reward buffer length =  8100
Num timesteps: 8200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0066
Last reward =  [-0.02941227]
Reward buffer length =  8200
Num timesteps: 8300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0060
Last reward =  [-0.03313908]
Reward buffer length =  8300
Num timesteps: 8400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0040
Last reward =  [0.01888044]
Reward buffer length =  8400
Num timesteps: 8500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0008
Last reward =  [-0.09616919]
Reward buffer length =  8500
Num timesteps: 8600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0037
Last reward =  [0.03969398]
Reward buffer length =  8600
Num timesteps: 8700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0037
Last reward =  [0.08140063]
Reward buffer length =  8700
Num timesteps: 8800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0043
Last reward =  [0.01836085]
Reward buffer length =  8800
Num timesteps: 8900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0045
Last reward =  [-0.02315563]
Reward buffer length =  8900
Num timesteps: 9000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0100
Last reward =  [-0.035467]
Reward buffer length =  9000
Num timesteps: 9100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0064
Last reward =  [0.05327737]
Reward buffer length =  9100
Num timesteps: 9200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0050
Last reward =  [-0.00466835]
Reward buffer length =  9200
Num timesteps: 9300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0055
Last reward =  [-0.06893665]
Reward buffer length =  9300
Num timesteps: 9400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0031
Last reward =  [0.02248156]
Reward buffer length =  9400
Num timesteps: 9500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0071
Last reward =  [-0.05386913]
Reward buffer length =  9500
Num timesteps: 9600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0054
Last reward =  [0.03722262]
Reward buffer length =  9600
Num timesteps: 9700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0022
Last reward =  [-0.03399134]
Reward buffer length =  9700
Num timesteps: 9800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0016
Last reward =  [-0.02332973]
Reward buffer length =  9800
Num timesteps: 9900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0006
Last reward =  [9.274483e-05]
Reward buffer length =  9900
Num timesteps: 10000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0074
Last reward =  [0.01194286]
Reward buffer length =  10000
Saving new best model to E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-742f6416\online\model.zip
Num timesteps: 10100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0023
Last reward =  [0.00682473]
Reward buffer length =  10100
Num timesteps: 10200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0008
Last reward =  [0.01226759]
Reward buffer length =  10200
Num timesteps: 10300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0013
Last reward =  [0.00686455]
Reward buffer length =  10300
Num timesteps: 10400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0060
Last reward =  [-0.02342987]
Reward buffer length =  10400
Num timesteps: 10500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0026
Last reward =  [0.00941133]
Reward buffer length =  10500
Num timesteps: 10600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0009
Last reward =  [0.03365803]
Reward buffer length =  10600
Num timesteps: 10700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0030
Last reward =  [0.00997066]
Reward buffer length =  10700
Num timesteps: 10800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0047
Last reward =  [-0.0034008]
Reward buffer length =  10800
Num timesteps: 10900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0013
Last reward =  [-0.00709057]
Reward buffer length =  10900
Num timesteps: 11000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0015
Last reward =  [0.06338739]
Reward buffer length =  11000
Num timesteps: 11100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0010
Last reward =  [0.02338552]
Reward buffer length =  11100
Num timesteps: 11200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0018
Last reward =  [-0.00125885]
Reward buffer length =  11200
Num timesteps: 11300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0037
Last reward =  [0.00281572]
Reward buffer length =  11300
Num timesteps: 11400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0052
Last reward =  [-0.02192307]
Reward buffer length =  11400
Num timesteps: 11500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0018
Last reward =  [-0.0040102]
Reward buffer length =  11500
Num timesteps: 11600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0002
Last reward =  [0.00524282]
Reward buffer length =  11600
Num timesteps: 11700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0003
Last reward =  [-0.00844526]
Reward buffer length =  11700
Num timesteps: 11800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0050
Last reward =  [-0.01406813]
Reward buffer length =  11800
Num timesteps: 11900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0020
Last reward =  [0.01815939]
Reward buffer length =  11900
Num timesteps: 12000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0014
Last reward =  [0.00159311]
Reward buffer length =  12000
Num timesteps: 12100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0021
Last reward =  [-0.00196123]
Reward buffer length =  12100
Num timesteps: 12200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0057
Last reward =  [-0.00047827]
Reward buffer length =  12200
Num timesteps: 12300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0022
Last reward =  [0.07772112]
Reward buffer length =  12300
Num timesteps: 12400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0021
Last reward =  [0.06155396]
Reward buffer length =  12400
Num timesteps: 12500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0003
Last reward =  [-0.03234005]
Reward buffer length =  12500
Num timesteps: 12600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0028
Last reward =  [0.00490761]
Reward buffer length =  12600
Num timesteps: 12700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0007
Last reward =  [-0.00862217]
Reward buffer length =  12700
Num timesteps: 12800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0021
Last reward =  [-0.03767872]
Reward buffer length =  12800
Num timesteps: 12900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0069
Last reward =  [-0.04983377]
Reward buffer length =  12900
Num timesteps: 13000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0017
Last reward =  [-0.00974274]
Reward buffer length =  13000
Num timesteps: 13100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0029
Last reward =  [-0.02406263]
Reward buffer length =  13100
Num timesteps: 13200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0050
Last reward =  [0.01390839]
Reward buffer length =  13200
Num timesteps: 13300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0043
Last reward =  [-0.03483725]
Reward buffer length =  13300
Num timesteps: 13400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0049
Last reward =  [-0.00478745]
Reward buffer length =  13400
Num timesteps: 13500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0016
Last reward =  [-0.00385618]
Reward buffer length =  13500
Num timesteps: 13600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0047
Last reward =  [0.01107454]
Reward buffer length =  13600
Num timesteps: 13700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0024
Last reward =  [-0.05445099]
Reward buffer length =  13700
Num timesteps: 13800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0104
Last reward =  [-0.05834579]
Reward buffer length =  13800
Num timesteps: 13900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0023
Last reward =  [0.00801444]
Reward buffer length =  13900
Num timesteps: 14000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0049
Last reward =  [-0.01060438]
Reward buffer length =  14000
Num timesteps: 14100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0004
Last reward =  [-0.00182319]
Reward buffer length =  14100
Num timesteps: 14200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0013
Last reward =  [0.02413201]
Reward buffer length =  14200
Num timesteps: 14300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0049
Last reward =  [0.02993715]
Reward buffer length =  14300
Num timesteps: 14400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0043
Last reward =  [0.05019689]
Reward buffer length =  14400
Num timesteps: 14500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0009
Last reward =  [-0.06720531]
Reward buffer length =  14500
Num timesteps: 14600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0026
Last reward =  [0.05561155]
Reward buffer length =  14600
Num timesteps: 14700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0059
Last reward =  [-0.06191051]
Reward buffer length =  14700
Num timesteps: 14800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0008
Last reward =  [-0.00918317]
Reward buffer length =  14800
Num timesteps: 14900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0027
Last reward =  [0.02708754]
Reward buffer length =  14900
Num timesteps: 15000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0014
Last reward =  [-0.02878314]
Reward buffer length =  15000
Num timesteps: 15100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0026
Last reward =  [-0.05003389]
Reward buffer length =  15100
Num timesteps: 15200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0031
Last reward =  [0.00452694]
Reward buffer length =  15200
Num timesteps: 15300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0050
Last reward =  [-0.03503466]
Reward buffer length =  15300
Num timesteps: 15400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0033
Last reward =  [-0.00224161]
Reward buffer length =  15400
Num timesteps: 15500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0025
Last reward =  [0.05492783]
Reward buffer length =  15500
Num timesteps: 15600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0017
Last reward =  [-0.00461197]
Reward buffer length =  15600
Num timesteps: 15700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0017
Last reward =  [0.07008696]
Reward buffer length =  15700
Num timesteps: 15800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0056
Last reward =  [0.01001787]
Reward buffer length =  15800
Num timesteps: 15900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0009
Last reward =  [-0.0044508]
Reward buffer length =  15900
Num timesteps: 16000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0072
Last reward =  [0.01906824]
Reward buffer length =  16000
Num timesteps: 16100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0005
Last reward =  [0.05955553]
Reward buffer length =  16100
Num timesteps: 16200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0047
Last reward =  [-0.02154827]
Reward buffer length =  16200
Num timesteps: 16300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0020
Last reward =  [0.03341961]
Reward buffer length =  16300
Num timesteps: 16400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0025
Last reward =  [-0.02135658]
Reward buffer length =  16400
Num timesteps: 16500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0038
Last reward =  [0.01045132]
Reward buffer length =  16500
Num timesteps: 16600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0018
Last reward =  [0.02410841]
Reward buffer length =  16600
Num timesteps: 16700
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0096
Last reward =  [-0.00055408]
Reward buffer length =  16700
Num timesteps: 16800
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0025
Last reward =  [0.00573063]
Reward buffer length =  16800
Num timesteps: 16900
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0045
Last reward =  [-0.00240088]
Reward buffer length =  16900
Num timesteps: 17000
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0037
Last reward =  [0.03346086]
Reward buffer length =  17000
Num timesteps: 17100
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0016
Last reward =  [0.04682231]
Reward buffer length =  17100
Num timesteps: 17200
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0020
Last reward =  [-0.02990103]
Reward buffer length =  17200
Num timesteps: 17300
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0020
Last reward =  [0.09728074]
Reward buffer length =  17300
Num timesteps: 17400
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0019
Last reward =  [0.00154757]
Reward buffer length =  17400
Num timesteps: 17500
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: 0.0004
Last reward =  [0.00847554]
Reward buffer length =  17500
Num timesteps: 17600
Best mean reward: 0.0091, Best mean reward step: 3100 Last mean reward per episode: -0.0027
Last reward =  [-0.06815434]
Reward buffer length = forrtl: error (200): program aborting due to control-C event
Image              PC                Routine            Line        Source             
libifcoremd.dll    00007FFBEB283B58  Unknown               Unknown  Unknown
KERNELBASE.dll     00007FFC7C845485  Unknown               Unknown  Unknown
KERNEL32.DLL       00007FFC7E7554E0  Unknown               Unknown  Unknown
ntdll.dll          00007FFC7EC0485B  Unknown               Unknown  Unknown
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
random
['td3']
daily
True
Training with config file ../settings/config-train-oanda-daily-td3.ini and default params True
Using default params
v_instruments_in_portfolio = ['gbpchf', 'gbpusd', 'usdjpy', 'audcad', 'cadchf', 'nzdcad', 'audjpy']
v_instruments_in_portfolio_sorted = ['audcad', 'audjpy', 'cadchf', 'gbpchf', 'gbpusd', 'nzdcad', 'usdjpy']
Account currency: jpy
row_count=5684, start_row=3, start_date=2004-06-03T00:00:00.000000000, end_row=5683, end_date=2022-10-07T00:00:00.000000000
Data shape:(7, 5680, 4)
Instruments:['audcad', 'audjpy', 'cadchf', 'gbpchf', 'gbpusd', 'nzdcad', 'usdjpy'], lookack:100, random_episode_start:True, cash:1000.0, max_slippage_percent:0.01, lot_size:Micro, leverage:20, compute_position:long_and_short, compute_indicators:all_full, compute_reward:['log_returns'], meta_rl:False, verbose:False
Model name:fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-495e89f3
v_online_model_file_name: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-495e89f3\online\model.zip
v_online_model_file_name_stats: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.td3-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-495e89f3\online\stats.pkl
Online class: <class 'stable_baselines3.td3.td3.TD3'>, Online policy: <class 'stable_baselines3.td3.policies.TD3Policy'>
Using cuda device
Start training model with account_currency jpy, instrument ['audcad', 'audjpy', 'cadchf', 'gbpchf', 'gbpusd', 'nzdcad', 'usdjpy'], pip_size [0.0001, 0.01, 0.0001, 0.0001, 0.0001, 0.0001, 0.01], pip_spread [2, 2, 2, 2, 2, 2, 2]...
Num timesteps: 100
Best mean reward: -inf, Best mean reward step: 0 Last mean reward per episode: -0.0004
Last reward =  [9.441376e-05]
Reward buffer length =  100
Num timesteps: 200
Best mean reward: -0.0004, Best mean reward step: 100 Last mean reward per episode: -0.0023
Last reward =  [0.01103926]
Reward buffer length =  200
Num timesteps: 300
Best mean reward: -0.0004, Best mean reward step: 100 Last mean reward per episode: 0.0017
Last reward =  [0.10954857]
Reward buffer length =  300
Num timesteps: 400
Best mean reward: 0.0017, Best mean reward step: 300 Last mean reward per episode: -0.0030
Last reward =  [0.01496458]
Reward buffer length =  400
Num timesteps: 500
Best mean reward: 0.0017, Best mean reward step: 300 Last mean reward per episode: -0.0054
Last reward =  [0.03602457]
Reward buffer length =  500
Num timesteps: 600
Best mean reward: 0.0017, Best mean reward step: 300 Last mean reward per episode: -0.0011
Last reward =  [-0.02180338]
Reward buffer length =  600
Num timesteps: 700
Best mean reward: 0.0017, Best mean reward step: 300 Last mean reward per episode: 0.0018
Last reward =  [-0.00816536]
Reward buffer length =  700
Num timesteps: 800
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0033
Last reward =  [-0.03126764]
Reward buffer length =  800
Num timesteps: 900
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0008
Last reward =  [-0.0079298]
Reward buffer length =  900
Num timesteps: 1000
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0026
Last reward =  [-0.00384283]
Reward buffer length =  1000
Num timesteps: 1100
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0010
Last reward =  [0.02225542]
Reward buffer length =  1100
Num timesteps: 1200
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: 0.0015
Last reward =  [0.08211088]
Reward buffer length =  1200
Num timesteps: 1300
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: 0.0002
Last reward =  [0.031178]
Reward buffer length =  1300
Num timesteps: 1400
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: 0.0004
Last reward =  [-0.01104355]
Reward buffer length =  1400
Num timesteps: 1500
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0004
Last reward =  [-0.04931355]
Reward buffer length =  1500
Num timesteps: 1600
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0030
Last reward =  [0.02893591]
Reward buffer length =  1600
Num timesteps: 1700
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: -0.0017
Last reward =  [0.03803873]
Reward buffer length =  1700
Num timesteps: 1800
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: 0.0005
Last reward =  [0.04180479]
Reward buffer length =  1800
Num timesteps: 1900
Best mean reward: 0.0018, Best mean reward step: 700 Last mean reward per episode: 0.0025
Last reward =  [0.01113892]
Reward buffer length =  1900
Num timesteps: 2000
Best mean reward: 0.0025, Best mean reward step: 1900 Last mean reward per episode: -0.0027
Last reward =  [0.02517414]
Reward buffer length =  2000
Num timesteps: 2100
Best mean reward: 0.0025, Best mean reward step: 1900 Last mean reward per episode: -0.0011
Last reward =  [-0.0022378]
Reward buffer length =  2100
Num timesteps: 2200
Best mean reward: 0.0025, Best mean reward step: 1900 Last mean reward per episode: 0.0010
Last reward =  [-0.00854015]
Reward buffer length =  2200
Num timesteps: 2300
Best mean reward: 0.0025, Best mean reward step: 1900 Last mean reward per episode: 0.0045
Last reward =  [0.03308487]
Reward buffer length =  2300
Num timesteps: 2400
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0003
Last reward =  [0.01162338]
Reward buffer length =  2400
Num timesteps: 2500
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0006
Last reward =  [-0.00257158]
Reward buffer length =  2500
Num timesteps: 2600
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0052
Last reward =  [0.04146814]
Reward buffer length =  2600
Num timesteps: 2700
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0039
Last reward =  [-0.02875185]
Reward buffer length =  2700
Num timesteps: 2800
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0033
Last reward =  [0.02066135]
Reward buffer length =  2800
Num timesteps: 2900
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0003
Last reward =  [-0.03265381]
Reward buffer length =  2900
Num timesteps: 3000
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0018
Last reward =  [-0.01491308]
Reward buffer length =  3000
Num timesteps: 3100
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0030
Last reward =  [0.00668859]
Reward buffer length =  3100
Num timesteps: 3200
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0032
Last reward =  [0.00290632]
Reward buffer length =  3200
Num timesteps: 3300
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0026
Last reward =  [0.00244856]
Reward buffer length =  3300
Num timesteps: 3400
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0015
Last reward =  [0.02002239]
Reward buffer length =  3400
Num timesteps: 3500
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: 0.0008
Last reward =  [-0.02888727]
Reward buffer length =  3500
Num timesteps: 3600
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0027
Last reward =  [0.0088377]
Reward buffer length =  3600
Num timesteps: 3700
Best mean reward: 0.0045, Best mean reward step: 2300 Last mean reward per episode: -0.0046e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
random
['ppo']
daily
True
Training with config file ../settings/config-train-oanda-daily-ppo.ini and default params True
Using default params
v_instruments_in_portfolio = ['eurnzd', 'usdchf', 'eurcad', 'euraud', 'chfjpy', 'audjpy', 'cadjpy']
v_instruments_in_portfolio_sorted = ['audjpy', 'cadjpy', 'chfjpy', 'euraud', 'eurcad', 'eurnzd', 'usdchf']
Account currency: eur
row_count=5684, start_row=3, start_date=2004-06-03T00:00:00.000000000, end_row=5683, end_date=2022-10-07T00:00:00.000000000
Data shape:(7, 5680, 4)
Instruments:['audjpy', 'cadjpy', 'chfjpy', 'euraud', 'eurcad', 'eurnzd', 'usdchf'], lookack:100, random_episode_start:True, cash:1000.0, max_slippage_percent:0.01, lot_size:Micro, leverage:20, compute_position:long_and_short, compute_indicators:all_full, compute_reward:['log_returns'], meta_rl:False, verbose:False
Model name:fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-01d87e25
v_online_model_file_name: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-01d87e25\online\model.zip
v_online_model_file_name_stats: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-300100-5680-100-2-oanda-daily-on_algo.ppo-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-01d87e25\online\stats.pkl
Online class: <class 'stable_baselines3.ppo.ppo.PPO'>, Online policy: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
Using cuda device
Start training model with account_currency eur, instrument ['audjpy', 'cadjpy', 'chfjpy', 'euraud', 'eurcad', 'eurnzd', 'usdchf'], pip_size [0.01, 0.01, 0.01, 0.0001, 0.0001, 0.0001, 0.0001], pip_spread [2, 2, 2, 2, 2, 2, 2]...
Num timesteps: 100
Best mean reward: -inf, Best mean reward step: 0 Last mean reward per episode: -0.0025
Last reward =  [-0.02649832]
Reward buffer length =  100
Num timesteps: 200
Best mean reward: -0.0025, Best mean reward step: 100 Last mean reward per episode: 0.0015
Last reward =  [-0.02308798]
Reward buffer length =  200
Num timesteps: 300
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: -0.0003
Last reward =  [-0.03255224]
Reward buffer length =  300
Num timesteps: 400
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: -0.0027
Last reward =  [0.01455498]
Reward buffer length =  400
Num timesteps: 500
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: 0.0004
Last reward =  [0.05278873]
Reward buffer length =  500
Num timesteps: 600
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: -0.0012
Last reward =  [0.00432682]
Reward buffer length =  600
Num timesteps: 700
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: -0.0012
Last reward =  [0.01107311]
Reward buffer length =  700
Num timesteps: 800
Best mean reward: 0.0015, Best mean reward step: 200 Last mean reward per episode: 0.0022
Last reward =  [0.03770256]
Reward buffer length =  800
Num timesteps: 900
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0073
Last reward =  [-0.01080894]
Reward buffer length =  900
Num timesteps: 1000
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0052
Last reward =  [-0.0026412]
Reward buffer length =  1000
Num timesteps: 1100
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0031
Last reward =  [0.01936007]
Reward buffer length =  1100
Num timesteps: 1200
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0033
Last reward =  [0.03069687]
Reward buffer length =  1200
Num timesteps: 1300
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0003
Last reward =  [-0.01502466]
Reward buffer length =  1300
Num timesteps: 1400
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: 0.0008
Last reward =  [-0.02011967]
Reward buffer length =  1400
Num timesteps: 1500
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0002
Last reward =  [0.01561928]
Reward buffer length =  1500
Num timesteps: 1600
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: 0.0004
Last reward =  [-4.673004e-05]
Reward buffer length =  1600
Num timesteps: 1700
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0044
Last reward =  [-0.15471697]
Reward buffer length =  1700
Num timesteps: 1800
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0018
Last reward =  [-0.07233763]
Reward buffer length =  1800
Num timesteps: 1900
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0004
Last reward =  [-0.00117397]
Reward buffer length =  1900
Num timesteps: 2000
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: -0.0142
Last reward =  [0.024755]
Reward buffer length =  2000
Num timesteps: 2100
Best mean reward: 0.0022, Best mean reward step: 800 Last mean reward per episode: 0.0068
Last reward =  [-0.01089287]
Reward buffer length =  2100
Num timesteps: 2200
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0064
Last reward =  [-0.03659296]
Reward buffer length =  2200
Num timesteps: 2300
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0031
Last reward =  [-0.02926207]
Reward buffer length =  2300
Num timesteps: 2400
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0005
Last reward =  [0.00363541]
Reward buffer length =  2400
Num timesteps: 2500
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0020
Last reward =  [-0.00297642]
Reward buffer length =  2500
Num timesteps: 2600
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0002
Last reward =  [0.0526185]
Reward buffer length =  2600
Num timesteps: 2700
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0013
Last reward =  [-0.01910162]
Reward buffer length =  2700
Num timesteps: 2800
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0008
Last reward =  [-0.00326157]
Reward buffer length =  2800
Num timesteps: 2900
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0042
Last reward =  [-0.02679634]
Reward buffer length =  2900
Num timesteps: 3000
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0010
Last reward =  [-0.00320387]
Reward buffer length =  3000
Num timesteps: 3100
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0010
Last reward =  [0.00088048]
Reward buffer length =  3100
Num timesteps: 3200
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0040
Last reward =  [-0.00681853]
Reward buffer length =  3200
Num timesteps: 3300
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0018
Last reward =  [-0.01850104]
Reward buffer length =  3300
Num timesteps: 3400
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0036
Last reward =  [0.00661802]
Reward buffer length =  3400
Num timesteps: 3500
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: 0.0038
Last reward =  [0.00893521]
Reward buffer length =  3500
Num timesteps: 3600
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0057
Last reward =  [0.00465441]
Reward buffer length =  3600
Num timesteps: 3700
Best mean reward: 0.0068, Best mean reward step: 2100 Last mean reward per episode: -0.0032forrtl: error (200): program aborting due to window-CLOSE event
Image              PC                Routine            Line        Source             
libifcoremd.dll    00007FFBE8913B58  Unknown               Unknown  Unknown
KERNELBASE.dll     00007FFC7C845485  Unknown               Unknown  Unknown
KERNEL32.DLL       00007FFC7E7554E0  Unknown               Unknown  Unknown
ntdll.dll          00007FFC7EC0485B  Unknown               Unknown  Unknown
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:252: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_CLOSE'] = talib.SMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:253: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_HIGH'] = talib.SMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:254: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['SMA_LOW'] = talib.SMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:256: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_CLOSE'] = talib.T3(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:257: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_HIGH'] = talib.T3(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:258: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['T3_LOW'] = talib.T3(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:260: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_CLOSE'] = talib.TEMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:261: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_HIGH'] = talib.TEMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TEMA_LOW'] = talib.TEMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:264: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_CLOSE'] = talib.TRIMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:265: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_HIGH'] = talib.TRIMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:266: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['TRIMA_LOW'] = talib.TRIMA(self.low_price)
e:\alpha-machine\src\findrl\technical_features_full.py:268: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_CLOSE'] = talib.WMA(self.close_price)
e:\alpha-machine\src\findrl\technical_features_full.py:269: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_HIGH'] = talib.WMA(self.high_price)
e:\alpha-machine\src\findrl\technical_features_full.py:270: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.security['WMA_LOW'] = talib.WMA(self.low_price)
random
['sac']
daily
True
Training with config file ../settings/config-train-oanda-daily-sac.ini and default params True
Using default params
v_instruments_in_portfolio = ['eurusd', 'eurnzd', 'eurjpy', 'audusd', 'eurcad', 'gbpnzd', 'audchf']
v_instruments_in_portfolio_sorted = ['audchf', 'audusd', 'eurcad', 'eurjpy', 'eurnzd', 'eurusd', 'gbpnzd']
Account currency: usd
row_count=5685, start_row=4, start_date=2004-06-04T00:00:00.000000000, end_row=5684, end_date=2022-10-07T00:00:00.000000000
Data shape:(7, 5680, 4)
Instruments:['audchf', 'audusd', 'eurcad', 'eurjpy', 'eurnzd', 'eurusd', 'gbpnzd'], lookack:100, random_episode_start:True, cash:1000.0, max_slippage_percent:0.01, lot_size:Micro, leverage:20, compute_position:long_and_short, compute_indicators:all_full, compute_reward:['log_returns'], meta_rl:False, verbose:False
Model name:fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.sac-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-b18df551
v_online_model_file_name: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.sac-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-b18df551\online\model.zip
v_online_model_file_name_stats: E:\alpha-machine\models\forex\oanda\daily\sb3-train\fx_sb3_week_41_default_params_lev_20_w_cb_w_res_noise_none-7-100100-5680-100-2-oanda-daily-on_algo.sac-c_pos.long_and_short-c_ind.all_full-c_rew.[log_returns]-m_rl.False-b18df551\online\stats.pkl
Online class: <class 'stable_baselines3.sac.sac.SAC'>, Online policy: <class 'stable_baselines3.sac.policies.SACPolicy'>
Using cuda device
Start training model with account_currency usd, instrument ['audchf', 'audusd', 'eurcad', 'eurjpy', 'eurnzd', 'eurusd', 'gbpnzd'], pip_size [0.0001, 0.0001, 0.0001, 0.01, 0.0001, 0.0001, 0.0001], pip_spread [2, 2, 2, 2, 2, 2, 2]...
Num timesteps: 100
Best mean reward: -inf, Best mean reward step: 0 Last mean reward per episode: 0.0008
Last reward =  [-0.09082699]
Reward buffer length =  100
Num timesteps: 200
Best mean reward: 0.0008, Best mean reward step: 100 Last mean reward per episode: 0.0038
Last reward =  [0.01015139]
Reward buffer length =  200
Num timesteps: 300
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0065
Last reward =  [-0.02371168]
Reward buffer length =  300
Num timesteps: 400
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0027
Last reward =  [0.03629541]
Reward buffer length =  400
Num timesteps: 500
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0051
Last reward =  [0.01893997]
Reward buffer length =  500
Num timesteps: 600
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0082
Last reward =  [0.00846672]
Reward buffer length =  600
Num timesteps: 700
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0005
Last reward =  [0.03520203]
Reward buffer length =  700
Num timesteps: 800
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0006
Last reward =  [0.02943897]
Reward buffer length =  800
Num timesteps: 900
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0030
Last reward =  [-0.01501036]
Reward buffer length =  900
Num timesteps: 1000
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0039
Last reward =  [0.00406599]
Reward buffer length =  1000
Num timesteps: 1100
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0041
Last reward =  [-0.02062368]
Reward buffer length =  1100
Num timesteps: 1200
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0004
Last reward =  [0.02715015]
Reward buffer length =  1200
Num timesteps: 1300
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0006
Last reward =  [0.01268768]
Reward buffer length =  1300
Num timesteps: 1400
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0037
Last reward =  [0.02841854]
Reward buffer length =  1400
Num timesteps: 1500
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0039
Last reward =  [0.00804377]
Reward buffer length =  1500
Num timesteps: 1600
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0003
Last reward =  [-0.04388475]
Reward buffer length =  1600
Num timesteps: 1700
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0073
Last reward =  [0.03653145]
Reward buffer length =  1700
Num timesteps: 1800
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0060
Last reward =  [-0.03264523]
Reward buffer length =  1800
Num timesteps: 1900
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0045
Last reward =  [0.02463293]
Reward buffer length =  1900
Num timesteps: 2000
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0000
Last reward =  [-0.00686693]
Reward buffer length =  2000
Num timesteps: 2100
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0034
Last reward =  [0.04104376]
Reward buffer length =  2100
Num timesteps: 2200
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0029
Last reward =  [0.0022831]
Reward buffer length =  2200
Num timesteps: 2300
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0062
Last reward =  [0.03062105]
Reward buffer length =  2300
Num timesteps: 2400
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0021
Last reward =  [0.01911211]
Reward buffer length =  2400
Num timesteps: 2500
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0039
Last reward =  [-0.00723886]
Reward buffer length =  2500
Num timesteps: 2600
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0019
Last reward =  [0.00488949]
Reward buffer length =  2600
Num timesteps: 2700
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: -0.0082
Last reward =  [-0.01525211]
Reward buffer length =  2700
Num timesteps: 2800
Best mean reward: 0.0038, Best mean reward step: 200 Last mean reward per episode: 0.0091
Last reward =  [-0.00733423]
Reward buffer length =  2800
Num timesteps: 2900
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: 0.0011
Last reward =  [0.03462362]
Reward buffer length =  2900
Num timesteps: 3000
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: -0.0029
Last reward =  [-0.03368282]
Reward buffer length =  3000
Num timesteps: 3100
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: -0.0014
Last reward =  [-0.01225233]
Reward buffer length =  3100
Num timesteps: 3200
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: -0.0034
Last reward =  [0.05471182]
Reward buffer length =  3200
Num timesteps: 3300
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: 0.0001
Last reward =  [0.01071596]
Reward buffer length =  3300
Num timesteps: 3400
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: -0.0050
Last reward =  [-0.02145052]
Reward buffer length =  3400
Num timesteps: 3500
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: 0.0031
Last reward =  [0.00367308]
Reward buffer length =  3500
Num timesteps: 3600
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: -0.0005
Last reward =  [-0.02639389]
Reward buffer length =  3600
Num timesteps: 3700
Best mean reward: 0.0091, Best mean reward step: 2800 Last mean reward per episode: 0.0008forrtl: error (200): program aborting due to control-C event
Image              PC                Routine            Line        Source             
libifcoremd.dll    00007FFCCA2F3B58  Unknown               Unknown  Unknown
KERNELBASE.dll     00007FFEB9665485  Unknown               Unknown  Unknown
KERNEL32.DLL       00007FFEBAB854E0  Unknown               Unknown  Unknown
ntdll.dll          00007FFEBBF4485B  Unknown               Unknown  Unknown
